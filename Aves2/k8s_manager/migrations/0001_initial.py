# Generated by Django 2.1.5 on 2020-01-13 06:55

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='K8SNamespace',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default='', max_length=128)),
                ('jd_group', models.CharField(blank=True, default='', max_length=128)),
                ('jd_group_cn', models.CharField(blank=True, default='', max_length=128)),
            ],
            options={
                'db_table': 'k8s_namespace',
            },
        ),
        migrations.CreateModel(
            name='K8SPvc',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default='', max_length=128)),
                ('size', models.IntegerField(default=0)),
                ('mount_path', models.CharField(default='/mnt/', max_length=32)),
                ('access_mode', models.CharField(blank=True, choices=[('ReadWriteMany', '可读写多次'), ('ReadWriteOnce', '可读写一次')], max_length=32, null=True)),
                ('namespace', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='k8s_pvc_namespace', to='k8s_manager.K8SNamespace')),
            ],
            options={
                'db_table': 'k8s_pvc',
            },
        ),
        migrations.CreateModel(
            name='K8SPvcUserRel',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('access_mode', models.CharField(blank=True, choices=[('ReadWriteMany', '可读写多次'), ('ReadWriteOnce', '可读写一次')], max_length=32, null=True)),
                ('pvc', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='k8s_pvc', to='k8s_manager.K8SPvc')),
            ],
            options={
                'db_table': 'k8s_pvc_user_rel',
            },
        ),
        migrations.CreateModel(
            name='K8SResourceQuota',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default='', max_length=128)),
                ('limits_cpu', models.IntegerField(default=0)),
                ('limits_memory', models.IntegerField(default=0)),
                ('requests_cpu', models.IntegerField(default=0)),
                ('requests_memory', models.IntegerField(default=0)),
                ('namespace', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='k8s_resource_quota_namespace', to='k8s_manager.K8SNamespace')),
            ],
        ),
        migrations.CreateModel(
            name='K8SStorageClass',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default='', max_length=128)),
                ('note', models.CharField(blank=True, default='', max_length=128)),
            ],
            options={
                'db_table': 'k8s_storage_class',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('username', models.CharField(default='', max_length=128)),
            ],
        ),
        migrations.AddField(
            model_name='k8spvcuserrel',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user', to='k8s_manager.User'),
        ),
        migrations.AddField(
            model_name='k8spvc',
            name='storageclass',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='k8s_storage_class', to='k8s_manager.K8SStorageClass'),
        ),
        migrations.AddField(
            model_name='k8spvc',
            name='user',
            field=models.ManyToManyField(through='k8s_manager.K8SPvcUserRel', to='k8s_manager.User'),
        ),
    ]
